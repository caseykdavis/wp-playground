{
  "{\"sourceRoot\":\"/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground\",\"filename\":\"/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground/gulpfile.babel.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground\",\"plugins\":[],\"presets\":[]}:7.1.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
      "filename": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground/gulpfile.babel.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "/**\n * Gulpfile.\n *\n * Gulp with WordPress.\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies Vendor and Custom JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n * @tutorial https://github.com/ahmadawais/WPGulp\n * @author Ahmad Awais <https://twitter.com/MrAhmadAwais/>\n */\n\n/**\n * Load WPGulp Configuration.\n *\n * TODO: Customize your project in the wpgulp.js file.\n */\nconst config = require('./wpgulp.config.js');\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\n\n\nconst gulp = require('gulp'); // Gulp of-course.\n// CSS related plugins.\n\n\nconst sass = require('gulp-sass'); // Gulp plugin for Sass compilation.\n\n\nconst minifycss = require('gulp-uglifycss'); // Minifies CSS files.\n\n\nconst autoprefixer = require('gulp-autoprefixer'); // Autoprefixing magic.\n\n\nconst mmq = require('gulp-merge-media-queries'); // Combine matching media queries into one.\n\n\nconst rtlcss = require('gulp-rtlcss'); // Generates RTL stylesheet.\n// JS related plugins.\n\n\nconst concat = require('gulp-concat'); // Concatenates JS files.\n\n\nconst uglify = require('gulp-uglify'); // Minifies JS files.\n\n\nconst babel = require('gulp-babel'); // Compiles ESNext to browser compatible JS.\n// Image related plugins.\n\n\nconst imagemin = require('gulp-imagemin'); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n// Utility related plugins.\n\n\nconst rename = require('gulp-rename'); // Renames files E.g. style.css -> style.min.css.\n\n\nconst lineec = require('gulp-line-ending-corrector'); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\n\n\nconst filter = require('gulp-filter'); // Enables you to work on a subset of the original files by filtering them using a glob.\n\n\nconst sourcemaps = require('gulp-sourcemaps'); // Maps code in a compressed file (E.g. style.css) back to it’s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\n\n\nconst notify = require('gulp-notify'); // Sends message notification to you.\n\n\nconst browserSync = require('browser-sync').create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\n\n\nconst wpPot = require('gulp-wp-pot'); // For generating the .pot file.\n\n\nconst sort = require('gulp-sort'); // Recommended to prevent unnecessary changes in pot-file.\n\n\nconst cache = require('gulp-cache'); // Cache files in stream for later use.\n\n\nconst remember = require('gulp-remember'); //  Adds all the files it has ever seen back into the stream.\n\n\nconst plumber = require('gulp-plumber'); // Prevent pipe breaking caused by errors from gulp plugins.\n\n\nconst beep = require('beepbeep');\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\n\n\nconst errorHandler = r => {\n  notify.onError('\\n\\n❌  ===> ERROR: <%= error.message %>\\n')(r);\n  beep(); // this.emit('end');\n};\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\n\n\nconst browsersync = done => {\n  browserSync.init({\n    proxy: config.projectURL,\n    open: config.browserAutoOpen,\n    injectChanges: config.injectChanges,\n    watchEvents: ['change', 'add', 'unlink', 'addDir', 'unlinkDir']\n  });\n  done();\n}; // Helper function to allow browser reload with Gulp 4.\n\n\nconst reload = done => {\n  browserSync.reload();\n  done();\n};\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\n\n\ngulp.task('styles', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(autoprefixer(config.BROWSERS_LIST)).pipe(sourcemaps.write('./')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(mmq({\n    log: true\n  })) // Merge Media Queries only for .min.css version.\n  .pipe(browserSync.stream()) // Reloads style.css if that is enqueued.\n  .pipe(rename({\n    suffix: '.min'\n  })).pipe(minifycss({\n    maxLineLen: 10\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.min.css if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n✅  ===> STYLES — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\n\ngulp.task('stylesRTL', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(autoprefixer(config.BROWSERS_LIST)).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(rename({\n    suffix: '-rtl'\n  })) // Append \"-rtl\" to the filename.\n  .pipe(rtlcss()) // Convert to RTL.\n  .pipe(sourcemaps.write('./')) // Output sourcemap for style-rtl.css.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(mmq({\n    log: true\n  })) // Merge Media Queries only for .min.css version.\n  .pipe(rename({\n    suffix: '.min'\n  })).pipe(minifycss({\n    maxLineLen: 10\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(browserSync.stream()) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n✅  ===> STYLES RTL — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `vendorsJS`.\n *\n * Concatenate and uglify vendor JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS vendor files\n *     2. Concatenates all the files and generates vendors.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates vendors.min.js\n */\n\ngulp.task('vendorsJS', () => {\n  return gulp.src(config.jsVendorSRC, {\n    since: gulp.lastRun('vendorsJS')\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST // Target browser list to support.\n\n      }\n    }]]\n  })).pipe(remember(config.jsVendorSRC)) // Bring all files back to stream.\n  .pipe(concat(config.jsVendorFile + '.js')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsVendorDestination)).pipe(rename({\n    basename: config.jsVendorFile,\n    suffix: '.min'\n  })).pipe(uglify()).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsVendorDestination)).pipe(notify({\n    message: '\\n\\n✅  ===> VENDOR JS — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\n\ngulp.task('customJS', () => {\n  return gulp.src(config.jsCustomSRC, {\n    since: gulp.lastRun('customJS')\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST // Target browser list to support.\n\n      }\n    }]]\n  })).pipe(remember(config.jsCustomSRC)) // Bring all files back to stream.\n  .pipe(concat(config.jsCustomFile + '.js')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(rename({\n    basename: config.jsCustomFile,\n    suffix: '.min'\n  })).pipe(uglify()).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(notify({\n    message: '\\n\\n✅  ===> CUSTOM JS — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *z\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\n\ngulp.task('images', () => {\n  return gulp.src(config.imgSRC).pipe(cache(imagemin([imagemin.gifsicle({\n    interlaced: true\n  }), imagemin.jpegtran({\n    progressive: true\n  }), imagemin.optipng({\n    optimizationLevel: 3\n  }), // 0-7 low-high.\n  imagemin.svgo({\n    plugins: [{\n      removeViewBox: true\n    }, {\n      cleanupIDs: false\n    }]\n  })]))).pipe(gulp.dest(config.imgDST)).pipe(notify({\n    message: '\\n\\n✅  ===> IMAGES — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\n\ngulp.task('clearCache', function (done) {\n  return cache.clearAll(done);\n});\n/**\n * WP POT Translation File Generator.\n *\n * This task does the following:\n * 1. Gets the source of all the PHP files\n * 2. Sort files in stream by path or any custom sort comparator\n * 3. Applies wpPot with the variable set at the top of this file\n * 4. Generate a .pot file of i18n that can be used for l10n to build .mo file\n */\n\ngulp.task('translate', () => {\n  return gulp.src(config.watchPhp).pipe(sort()).pipe(wpPot({\n    domain: config.textDomain,\n    package: config.packageName,\n    bugReport: config.bugReport,\n    lastTranslator: config.lastTranslator,\n    team: config.team\n  })).pipe(gulp.dest(config.translationDestination + '/' + config.translationFile)).pipe(notify({\n    message: '\\n\\n✅  ===> TRANSLATE — completed!\\n',\n    onLast: true\n  }));\n});\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\n\ngulp.task('default', gulp.parallel('styles', 'vendorsJS', 'customJS', 'images', browsersync, () => {\n  gulp.watch(config.watchPhp, reload); // Reload on PHP file changes.\n\n  gulp.watch(config.watchStyles, gulp.parallel('styles')); // Reload on SCSS file changes.\n\n  gulp.watch(config.watchJsVendor, gulp.series('vendorsJS', reload)); // Reload on vendorsJS file changes.\n\n  gulp.watch(config.watchJsCustom, gulp.series('customJS', reload)); // Reload on customJS file changes.\n\n  gulp.watch(config.imgSRC, gulp.series('images', reload)); // Reload on customJS file changes.\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHBmaWxlLmJhYmVsLmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsInJlcXVpcmUiLCJndWxwIiwic2FzcyIsIm1pbmlmeWNzcyIsImF1dG9wcmVmaXhlciIsIm1tcSIsInJ0bGNzcyIsImNvbmNhdCIsInVnbGlmeSIsImJhYmVsIiwiaW1hZ2VtaW4iLCJyZW5hbWUiLCJsaW5lZWMiLCJmaWx0ZXIiLCJzb3VyY2VtYXBzIiwibm90aWZ5IiwiYnJvd3NlclN5bmMiLCJjcmVhdGUiLCJ3cFBvdCIsInNvcnQiLCJjYWNoZSIsInJlbWVtYmVyIiwicGx1bWJlciIsImJlZXAiLCJlcnJvckhhbmRsZXIiLCJyIiwib25FcnJvciIsImJyb3dzZXJzeW5jIiwiZG9uZSIsImluaXQiLCJwcm94eSIsInByb2plY3RVUkwiLCJvcGVuIiwiYnJvd3NlckF1dG9PcGVuIiwiaW5qZWN0Q2hhbmdlcyIsIndhdGNoRXZlbnRzIiwicmVsb2FkIiwidGFzayIsInNyYyIsInN0eWxlU1JDIiwiYWxsb3dFbXB0eSIsInBpcGUiLCJlcnJMb2dUb0NvbnNvbGUiLCJvdXRwdXRTdHlsZSIsInByZWNpc2lvbiIsIm9uIiwibG9nRXJyb3IiLCJ3cml0ZSIsImluY2x1ZGVDb250ZW50IiwibG9hZE1hcHMiLCJCUk9XU0VSU19MSVNUIiwiZGVzdCIsInN0eWxlRGVzdGluYXRpb24iLCJsb2ciLCJzdHJlYW0iLCJzdWZmaXgiLCJtYXhMaW5lTGVuIiwibWVzc2FnZSIsIm9uTGFzdCIsImpzVmVuZG9yU1JDIiwic2luY2UiLCJsYXN0UnVuIiwicHJlc2V0cyIsInRhcmdldHMiLCJicm93c2VycyIsImpzVmVuZG9yRmlsZSIsImpzVmVuZG9yRGVzdGluYXRpb24iLCJiYXNlbmFtZSIsImpzQ3VzdG9tU1JDIiwianNDdXN0b21GaWxlIiwianNDdXN0b21EZXN0aW5hdGlvbiIsImltZ1NSQyIsImdpZnNpY2xlIiwiaW50ZXJsYWNlZCIsImpwZWd0cmFuIiwicHJvZ3Jlc3NpdmUiLCJvcHRpcG5nIiwib3B0aW1pemF0aW9uTGV2ZWwiLCJzdmdvIiwicGx1Z2lucyIsInJlbW92ZVZpZXdCb3giLCJjbGVhbnVwSURzIiwiaW1nRFNUIiwiY2xlYXJBbGwiLCJ3YXRjaFBocCIsImRvbWFpbiIsInRleHREb21haW4iLCJwYWNrYWdlIiwicGFja2FnZU5hbWUiLCJidWdSZXBvcnQiLCJsYXN0VHJhbnNsYXRvciIsInRlYW0iLCJ0cmFuc2xhdGlvbkRlc3RpbmF0aW9uIiwidHJhbnNsYXRpb25GaWxlIiwicGFyYWxsZWwiLCJ3YXRjaCIsIndhdGNoU3R5bGVzIiwid2F0Y2hKc1ZlbmRvciIsInNlcmllcyIsIndhdGNoSnNDdXN0b20iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkE7Ozs7O0FBS0EsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUUsb0JBQUYsQ0FBdEI7QUFFQTs7Ozs7OztBQUtBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFFLE1BQUYsQ0FBcEIsQyxDQUFnQztBQUVoQzs7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUUsV0FBRixDQUFwQixDLENBQXFDOzs7QUFDckMsTUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUUsZ0JBQUYsQ0FBekIsQyxDQUErQzs7O0FBQy9DLE1BQU1JLFlBQVksR0FBR0osT0FBTyxDQUFFLG1CQUFGLENBQTVCLEMsQ0FBcUQ7OztBQUNyRCxNQUFNSyxHQUFHLEdBQUdMLE9BQU8sQ0FBRSwwQkFBRixDQUFuQixDLENBQW1EOzs7QUFDbkQsTUFBTU0sTUFBTSxHQUFHTixPQUFPLENBQUUsYUFBRixDQUF0QixDLENBQXlDO0FBRXpDOzs7QUFDQSxNQUFNTyxNQUFNLEdBQUdQLE9BQU8sQ0FBRSxhQUFGLENBQXRCLEMsQ0FBeUM7OztBQUN6QyxNQUFNUSxNQUFNLEdBQUdSLE9BQU8sQ0FBRSxhQUFGLENBQXRCLEMsQ0FBeUM7OztBQUN6QyxNQUFNUyxLQUFLLEdBQUdULE9BQU8sQ0FBRSxZQUFGLENBQXJCLEMsQ0FBdUM7QUFFdkM7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QUFmLEVBQXlCLFdBQXpCLEVBQXNDLFVBQXRDLEVBQWtELFFBQWxELEVBQTREbkUsV0FBNUQsRUFBeUUsTUFBTTtBQUM5RTFCLEVBQUFBLElBQUksQ0FBQzhGLEtBQUwsQ0FBWWhHLE1BQU0sQ0FBQ3FGLFFBQW5CLEVBQTZCaEQsTUFBN0IsRUFEOEUsQ0FDdkM7O0FBQ3ZDbkMsRUFBQUEsSUFBSSxDQUFDOEYsS0FBTCxDQUFZaEcsTUFBTSxDQUFDaUcsV0FBbkIsRUFBZ0MvRixJQUFJLENBQUM2RixRQUFMLENBQWUsUUFBZixDQUFoQyxFQUY4RSxDQUVqQjs7QUFDN0Q3RixFQUFBQSxJQUFJLENBQUM4RixLQUFMLENBQVloRyxNQUFNLENBQUNrRyxhQUFuQixFQUFrQ2hHLElBQUksQ0FBQ2lHLE1BQUwsQ0FBYSxXQUFiLEVBQTBCOUQsTUFBMUIsQ0FBbEMsRUFIOEUsQ0FHTjs7QUFDeEVuQyxFQUFBQSxJQUFJLENBQUM4RixLQUFMLENBQVloRyxNQUFNLENBQUNvRyxhQUFuQixFQUFrQ2xHLElBQUksQ0FBQ2lHLE1BQUwsQ0FBYSxVQUFiLEVBQXlCOUQsTUFBekIsQ0FBbEMsRUFKOEUsQ0FJUDs7QUFDdkVuQyxFQUFBQSxJQUFJLENBQUM4RixLQUFMLENBQVloRyxNQUFNLENBQUN3RSxNQUFuQixFQUEyQnRFLElBQUksQ0FBQ2lHLE1BQUwsQ0FBYSxRQUFiLEVBQXVCOUQsTUFBdkIsQ0FBM0IsRUFMOEUsQ0FLaEI7QUFDOUQsQ0FORCxDQUZEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9jYXNleWtkYXZpcy9kZXYvd3AtcGxheWdyb3VuZC93cC1jb250ZW50L3RoZW1lcy93cC1wbGF5Z3JvdW5kIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHdWxwZmlsZS5cbiAqXG4gKiBHdWxwIHdpdGggV29yZFByZXNzLlxuICpcbiAqIEltcGxlbWVudHM6XG4gKiAgICAgIDEuIExpdmUgcmVsb2FkcyBicm93c2VyIHdpdGggQnJvd3NlclN5bmMuXG4gKiAgICAgIDIuIENTUzogU2FzcyB0byBDU1MgY29udmVyc2lvbiwgZXJyb3IgY2F0Y2hpbmcsIEF1dG9wcmVmaXhpbmcsIFNvdXJjZW1hcHMsXG4gKiAgICAgICAgIENTUyBtaW5pZmljYXRpb24sIGFuZCBNZXJnZSBNZWRpYSBRdWVyaWVzLlxuICogICAgICAzLiBKUzogQ29uY2F0ZW5hdGVzICYgdWdsaWZpZXMgVmVuZG9yIGFuZCBDdXN0b20gSlMgZmlsZXMuXG4gKiAgICAgIDQuIEltYWdlczogTWluaWZpZXMgUE5HLCBKUEVHLCBHSUYgYW5kIFNWRyBpbWFnZXMuXG4gKiAgICAgIDUuIFdhdGNoZXMgZmlsZXMgZm9yIGNoYW5nZXMgaW4gQ1NTIG9yIEpTLlxuICogICAgICA2LiBXYXRjaGVzIGZpbGVzIGZvciBjaGFuZ2VzIGluIFBIUC5cbiAqICAgICAgNy4gQ29ycmVjdHMgdGhlIGxpbmUgZW5kaW5ncy5cbiAqICAgICAgOC4gSW5qZWN0Q1NTIGluc3RlYWQgb2YgYnJvd3NlciBwYWdlIHJlbG9hZC5cbiAqICAgICAgOS4gR2VuZXJhdGVzIC5wb3QgZmlsZSBmb3IgaTE4biBhbmQgbDEwbi5cbiAqXG4gKiBAdHV0b3JpYWwgaHR0cHM6Ly9naXRodWIuY29tL2FobWFkYXdhaXMvV1BHdWxwXG4gKiBAYXV0aG9yIEFobWFkIEF3YWlzIDxodHRwczovL3R3aXR0ZXIuY29tL01yQWhtYWRBd2Fpcy8+XG4gKi9cblxuLyoqXG4gKiBMb2FkIFdQR3VscCBDb25maWd1cmF0aW9uLlxuICpcbiAqIFRPRE86IEN1c3RvbWl6ZSB5b3VyIHByb2plY3QgaW4gdGhlIHdwZ3VscC5qcyBmaWxlLlxuICovXG5jb25zdCBjb25maWcgPSByZXF1aXJlKCAnLi93cGd1bHAuY29uZmlnLmpzJyApO1xuXG4vKipcbiAqIExvYWQgUGx1Z2lucy5cbiAqXG4gKiBMb2FkIGd1bHAgcGx1Z2lucyBhbmQgcGFzc2luZyB0aGVtIHNlbWFudGljIG5hbWVzLlxuICovXG5jb25zdCBndWxwID0gcmVxdWlyZSggJ2d1bHAnICk7IC8vIEd1bHAgb2YtY291cnNlLlxuXG4vLyBDU1MgcmVsYXRlZCBwbHVnaW5zLlxuY29uc3Qgc2FzcyA9IHJlcXVpcmUoICdndWxwLXNhc3MnICk7IC8vIEd1bHAgcGx1Z2luIGZvciBTYXNzIGNvbXBpbGF0aW9uLlxuY29uc3QgbWluaWZ5Y3NzID0gcmVxdWlyZSggJ2d1bHAtdWdsaWZ5Y3NzJyApOyAvLyBNaW5pZmllcyBDU1MgZmlsZXMuXG5jb25zdCBhdXRvcHJlZml4ZXIgPSByZXF1aXJlKCAnZ3VscC1hdXRvcHJlZml4ZXInICk7IC8vIEF1dG9wcmVmaXhpbmcgbWFnaWMuXG5jb25zdCBtbXEgPSByZXF1aXJlKCAnZ3VscC1tZXJnZS1tZWRpYS1xdWVyaWVzJyApOyAvLyBDb21iaW5lIG1hdGNoaW5nIG1lZGlhIHF1ZXJpZXMgaW50byBvbmUuXG5jb25zdCBydGxjc3MgPSByZXF1aXJlKCAnZ3VscC1ydGxjc3MnICk7IC8vIEdlbmVyYXRlcyBSVEwgc3R5bGVzaGVldC5cblxuLy8gSlMgcmVsYXRlZCBwbHVnaW5zLlxuY29uc3QgY29uY2F0ID0gcmVxdWlyZSggJ2d1bHAtY29uY2F0JyApOyAvLyBDb25jYXRlbmF0ZXMgSlMgZmlsZXMuXG5jb25zdCB1Z2xpZnkgPSByZXF1aXJlKCAnZ3VscC11Z2xpZnknICk7IC8vIE1pbmlmaWVzIEpTIGZpbGVzLlxuY29uc3QgYmFiZWwgPSByZXF1aXJlKCAnZ3VscC1iYWJlbCcgKTsgLy8gQ29tcGlsZXMgRVNOZXh0IHRvIGJyb3dzZXIgY29tcGF0aWJsZSBKUy5cblxuLy8gSW1hZ2UgcmVsYXRlZCBwbHVnaW5zLlxuY29uc3QgaW1hZ2VtaW4gPSByZXF1aXJlKCAnZ3VscC1pbWFnZW1pbicgKTsgLy8gTWluaWZ5IFBORywgSlBFRywgR0lGIGFuZCBTVkcgaW1hZ2VzIHdpdGggaW1hZ2VtaW4uXG5cbi8vIFV0aWxpdHkgcmVsYXRlZCBwbHVnaW5zLlxuY29uc3QgcmVuYW1lID0gcmVxdWlyZSggJ2d1bHAtcmVuYW1lJyApOyAvLyBSZW5hbWVzIGZpbGVzIEUuZy4gc3R5bGUuY3NzIC0+IHN0eWxlLm1pbi5jc3MuXG5jb25zdCBsaW5lZWMgPSByZXF1aXJlKCAnZ3VscC1saW5lLWVuZGluZy1jb3JyZWN0b3InICk7IC8vIENvbnNpc3RlbnQgTGluZSBFbmRpbmdzIGZvciBub24gVU5JWCBzeXN0ZW1zLiBHdWxwIFBsdWdpbiBmb3IgTGluZSBFbmRpbmcgQ29ycmVjdG9yIChBIHV0aWxpdHkgdGhhdCBtYWtlcyBzdXJlIHlvdXIgZmlsZXMgaGF2ZSBjb25zaXN0ZW50IGxpbmUgZW5kaW5ncykuXG5jb25zdCBmaWx0ZXIgPSByZXF1aXJlKCAnZ3VscC1maWx0ZXInICk7IC8vIEVuYWJsZXMgeW91IHRvIHdvcmsgb24gYSBzdWJzZXQgb2YgdGhlIG9yaWdpbmFsIGZpbGVzIGJ5IGZpbHRlcmluZyB0aGVtIHVzaW5nIGEgZ2xvYi5cbmNvbnN0IHNvdXJjZW1hcHMgPSByZXF1aXJlKCAnZ3VscC1zb3VyY2VtYXBzJyApOyAvLyBNYXBzIGNvZGUgaW4gYSBjb21wcmVzc2VkIGZpbGUgKEUuZy4gc3R5bGUuY3NzKSBiYWNrIHRvIGl04oCZcyBvcmlnaW5hbCBwb3NpdGlvbiBpbiBhIHNvdXJjZSBmaWxlIChFLmcuIHN0cnVjdHVyZS5zY3NzLCB3aGljaCB3YXMgbGF0ZXIgY29tYmluZWQgd2l0aCBvdGhlciBjc3MgZmlsZXMgdG8gZ2VuZXJhdGUgc3R5bGUuY3NzKS5cbmNvbnN0IG5vdGlmeSA9IHJlcXVpcmUoICdndWxwLW5vdGlmeScgKTsgLy8gU2VuZHMgbWVzc2FnZSBub3RpZmljYXRpb24gdG8geW91LlxuY29uc3QgYnJvd3NlclN5bmMgPSByZXF1aXJlKCAnYnJvd3Nlci1zeW5jJyApLmNyZWF0ZSgpOyAvLyBSZWxvYWRzIGJyb3dzZXIgYW5kIGluamVjdHMgQ1NTLiBUaW1lLXNhdmluZyBzeW5jaHJvbml6ZWQgYnJvd3NlciB0ZXN0aW5nLlxuY29uc3Qgd3BQb3QgPSByZXF1aXJlKCAnZ3VscC13cC1wb3QnICk7IC8vIEZvciBnZW5lcmF0aW5nIHRoZSAucG90IGZpbGUuXG5jb25zdCBzb3J0ID0gcmVxdWlyZSggJ2d1bHAtc29ydCcgKTsgLy8gUmVjb21tZW5kZWQgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBjaGFuZ2VzIGluIHBvdC1maWxlLlxuY29uc3QgY2FjaGUgPSByZXF1aXJlKCAnZ3VscC1jYWNoZScgKTsgLy8gQ2FjaGUgZmlsZXMgaW4gc3RyZWFtIGZvciBsYXRlciB1c2UuXG5jb25zdCByZW1lbWJlciA9IHJlcXVpcmUoICdndWxwLXJlbWVtYmVyJyApOyAvLyAgQWRkcyBhbGwgdGhlIGZpbGVzIGl0IGhhcyBldmVyIHNlZW4gYmFjayBpbnRvIHRoZSBzdHJlYW0uXG5jb25zdCBwbHVtYmVyID0gcmVxdWlyZSggJ2d1bHAtcGx1bWJlcicgKTsgLy8gUHJldmVudCBwaXBlIGJyZWFraW5nIGNhdXNlZCBieSBlcnJvcnMgZnJvbSBndWxwIHBsdWdpbnMuXG5jb25zdCBiZWVwID0gcmVxdWlyZSggJ2JlZXBiZWVwJyApO1xuXG4vKipcbiAqIEN1c3RvbSBFcnJvciBIYW5kbGVyLlxuICpcbiAqIEBwYXJhbSBNaXhlZCBlcnJcbiAqL1xuY29uc3QgZXJyb3JIYW5kbGVyID0gciA9PiB7XG5cdG5vdGlmeS5vbkVycm9yKCAnXFxuXFxu4p2MICA9PT0+IEVSUk9SOiA8JT0gZXJyb3IubWVzc2FnZSAlPlxcbicgKSggciApO1xuXHRiZWVwKCk7XG5cblx0Ly8gdGhpcy5lbWl0KCdlbmQnKTtcbn07XG5cbi8qKlxuICogVGFzazogYGJyb3dzZXItc3luY2AuXG4gKlxuICogTGl2ZSBSZWxvYWRzLCBDU1MgaW5qZWN0aW9ucywgTG9jYWxob3N0IHR1bm5lbGluZy5cbiAqIEBsaW5rIGh0dHA6Ly93d3cuYnJvd3NlcnN5bmMuaW8vZG9jcy9vcHRpb25zL1xuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGRvbmUgRG9uZS5cbiAqL1xuY29uc3QgYnJvd3NlcnN5bmMgPSBkb25lID0+IHtcblx0YnJvd3NlclN5bmMuaW5pdCgge1xuXHRcdHByb3h5OiBjb25maWcucHJvamVjdFVSTCxcblx0XHRvcGVuOiBjb25maWcuYnJvd3NlckF1dG9PcGVuLFxuXHRcdGluamVjdENoYW5nZXM6IGNvbmZpZy5pbmplY3RDaGFuZ2VzLFxuXHRcdHdhdGNoRXZlbnRzOiBbICdjaGFuZ2UnLCAnYWRkJywgJ3VubGluaycsICdhZGREaXInLCAndW5saW5rRGlyJyBdXG5cdH0gKTtcblx0ZG9uZSgpO1xufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGFsbG93IGJyb3dzZXIgcmVsb2FkIHdpdGggR3VscCA0LlxuY29uc3QgcmVsb2FkID0gZG9uZSA9PiB7XG5cdGJyb3dzZXJTeW5jLnJlbG9hZCgpO1xuXHRkb25lKCk7XG59O1xuXG4vKipcbiAqIFRhc2s6IGBzdHlsZXNgLlxuICpcbiAqIENvbXBpbGVzIFNhc3MsIEF1dG9wcmVmaXhlcyBpdCBhbmQgTWluaWZpZXMgQ1NTLlxuICpcbiAqIFRoaXMgdGFzayBkb2VzIHRoZSBmb2xsb3dpbmc6XG4gKiAgICAxLiBHZXRzIHRoZSBzb3VyY2Ugc2NzcyBmaWxlXG4gKiAgICAyLiBDb21waWxlcyBTYXNzIHRvIENTU1xuICogICAgMy4gV3JpdGVzIFNvdXJjZW1hcHMgZm9yIGl0XG4gKiAgICA0LiBBdXRvcHJlZml4ZXMgaXQgYW5kIGdlbmVyYXRlcyBzdHlsZS5jc3NcbiAqICAgIDUuIFJlbmFtZXMgdGhlIENTUyBmaWxlIHdpdGggc3VmZml4IC5taW4uY3NzXG4gKiAgICA2LiBNaW5pZmllcyB0aGUgQ1NTIGZpbGUgYW5kIGdlbmVyYXRlcyBzdHlsZS5taW4uY3NzXG4gKiAgICA3LiBJbmplY3RzIENTUyBvciByZWxvYWRzIHRoZSBicm93c2VyIHZpYSBicm93c2VyU3luY1xuICovXG5ndWxwLnRhc2soICdzdHlsZXMnLCAoKSA9PiB7XG5cdHJldHVybiBndWxwXG5cdFx0LnNyYyggY29uZmlnLnN0eWxlU1JDLCB7XG5cdFx0XHRhbGxvd0VtcHR5OiB0cnVlXG5cdFx0fSApXG5cdFx0LnBpcGUoIHBsdW1iZXIoIGVycm9ySGFuZGxlciApIClcblx0XHQucGlwZSggc291cmNlbWFwcy5pbml0KCkgKVxuXHRcdC5waXBlKFxuXHRcdFx0c2Fzcygge1xuXHRcdFx0XHRlcnJMb2dUb0NvbnNvbGU6IGNvbmZpZy5lcnJMb2dUb0NvbnNvbGUsXG5cdFx0XHRcdG91dHB1dFN0eWxlOiBjb25maWcub3V0cHV0U3R5bGUsXG5cdFx0XHRcdHByZWNpc2lvbjogY29uZmlnLnByZWNpc2lvblxuXHRcdFx0fSApXG5cdFx0KVxuXHRcdC5vbiggJ2Vycm9yJywgc2Fzcy5sb2dFcnJvciApXG5cdFx0LnBpcGUoIHNvdXJjZW1hcHMud3JpdGUoIHtcblx0XHRcdGluY2x1ZGVDb250ZW50OiBmYWxzZVxuXHRcdH0gKSApXG5cdFx0LnBpcGUoIHNvdXJjZW1hcHMuaW5pdCgge1xuXHRcdFx0bG9hZE1hcHM6IHRydWVcblx0XHR9ICkgKVxuXHRcdC5waXBlKCBhdXRvcHJlZml4ZXIoIGNvbmZpZy5CUk9XU0VSU19MSVNUICkgKVxuXHRcdC5waXBlKCBzb3VyY2VtYXBzLndyaXRlKCAnLi8nICkgKVxuXHRcdC5waXBlKCBsaW5lZWMoKSApIC8vIENvbnNpc3RlbnQgTGluZSBFbmRpbmdzIGZvciBub24gVU5JWCBzeXN0ZW1zLlxuXHRcdC5waXBlKCBndWxwLmRlc3QoIGNvbmZpZy5zdHlsZURlc3RpbmF0aW9uICkgKVxuXHRcdC5waXBlKCBmaWx0ZXIoICcqKi8qLmNzcycgKSApIC8vIEZpbHRlcmluZyBzdHJlYW0gdG8gb25seSBjc3MgZmlsZXMuXG5cdFx0LnBpcGUoIG1tcSgge1xuXHRcdFx0bG9nOiB0cnVlXG5cdFx0fSApICkgLy8gTWVyZ2UgTWVkaWEgUXVlcmllcyBvbmx5IGZvciAubWluLmNzcyB2ZXJzaW9uLlxuXHRcdC5waXBlKCBicm93c2VyU3luYy5zdHJlYW0oKSApIC8vIFJlbG9hZHMgc3R5bGUuY3NzIGlmIHRoYXQgaXMgZW5xdWV1ZWQuXG5cdFx0LnBpcGUoIHJlbmFtZSgge1xuXHRcdFx0c3VmZml4OiAnLm1pbidcblx0XHR9ICkgKVxuXHRcdC5waXBlKCBtaW5pZnljc3MoIHtcblx0XHRcdG1heExpbmVMZW46IDEwXG5cdFx0fSApIClcblx0XHQucGlwZSggbGluZWVjKCkgKSAvLyBDb25zaXN0ZW50IExpbmUgRW5kaW5ncyBmb3Igbm9uIFVOSVggc3lzdGVtcy5cblx0XHQucGlwZSggZ3VscC5kZXN0KCBjb25maWcuc3R5bGVEZXN0aW5hdGlvbiApIClcblx0XHQucGlwZSggZmlsdGVyKCAnKiovKi5jc3MnICkgKSAvLyBGaWx0ZXJpbmcgc3RyZWFtIHRvIG9ubHkgY3NzIGZpbGVzLlxuXHRcdC5waXBlKCBicm93c2VyU3luYy5zdHJlYW0oKSApIC8vIFJlbG9hZHMgc3R5bGUubWluLmNzcyBpZiB0aGF0IGlzIGVucXVldWVkLlxuXHRcdC5waXBlKCBub3RpZnkoIHtcblx0XHRcdG1lc3NhZ2U6ICdcXG5cXG7inIUgID09PT4gU1RZTEVTIOKAlCBjb21wbGV0ZWQhXFxuJyxcblx0XHRcdG9uTGFzdDogdHJ1ZVxuXHRcdH0gKSApO1xufSApO1xuXG4vKipcbiAqIFRhc2s6IGBzdHlsZXNSVExgLlxuICpcbiAqIENvbXBpbGVzIFNhc3MsIEF1dG9wcmVmaXhlcyBpdCwgR2VuZXJhdGVzIFJUTCBzdHlsZXNoZWV0LCBhbmQgTWluaWZpZXMgQ1NTLlxuICpcbiAqIFRoaXMgdGFzayBkb2VzIHRoZSBmb2xsb3dpbmc6XG4gKiAgICAxLiBHZXRzIHRoZSBzb3VyY2Ugc2NzcyBmaWxlXG4gKiAgICAyLiBDb21waWxlcyBTYXNzIHRvIENTU1xuICogICAgNC4gQXV0b3ByZWZpeGVzIGl0IGFuZCBnZW5lcmF0ZXMgc3R5bGUuY3NzXG4gKiAgICA1LiBSZW5hbWVzIHRoZSBDU1MgZmlsZSB3aXRoIHN1ZmZpeCAtcnRsIGFuZCBnZW5lcmF0ZXMgc3R5bGUtcnRsLmNzc1xuICogICAgNi4gV3JpdGVzIFNvdXJjZW1hcHMgZm9yIHN0eWxlLXJ0bC5jc3NcbiAqICAgIDcuIFJlbmFtZXMgdGhlIENTUyBmaWxlcyB3aXRoIHN1ZmZpeCAubWluLmNzc1xuICogICAgOC4gTWluaWZpZXMgdGhlIENTUyBmaWxlIGFuZCBnZW5lcmF0ZXMgc3R5bGUtcnRsLm1pbi5jc3NcbiAqICAgIDkuIEluamVjdHMgQ1NTIG9yIHJlbG9hZHMgdGhlIGJyb3dzZXIgdmlhIGJyb3dzZXJTeW5jXG4gKi9cbmd1bHAudGFzayggJ3N0eWxlc1JUTCcsICgpID0+IHtcblx0cmV0dXJuIGd1bHBcblx0XHQuc3JjKCBjb25maWcuc3R5bGVTUkMsIHtcblx0XHRcdGFsbG93RW1wdHk6IHRydWVcblx0XHR9IClcblx0XHQucGlwZSggcGx1bWJlciggZXJyb3JIYW5kbGVyICkgKVxuXHRcdC5waXBlKCBzb3VyY2VtYXBzLmluaXQoKSApXG5cdFx0LnBpcGUoXG5cdFx0XHRzYXNzKCB7XG5cdFx0XHRcdGVyckxvZ1RvQ29uc29sZTogY29uZmlnLmVyckxvZ1RvQ29uc29sZSxcblx0XHRcdFx0b3V0cHV0U3R5bGU6IGNvbmZpZy5vdXRwdXRTdHlsZSxcblx0XHRcdFx0cHJlY2lzaW9uOiBjb25maWcucHJlY2lzaW9uXG5cdFx0XHR9IClcblx0XHQpXG5cdFx0Lm9uKCAnZXJyb3InLCBzYXNzLmxvZ0Vycm9yIClcblx0XHQucGlwZSggc291cmNlbWFwcy53cml0ZSgge1xuXHRcdFx0aW5jbHVkZUNvbnRlbnQ6IGZhbHNlXG5cdFx0fSApIClcblx0XHQucGlwZSggc291cmNlbWFwcy5pbml0KCB7XG5cdFx0XHRsb2FkTWFwczogdHJ1ZVxuXHRcdH0gKSApXG5cdFx0LnBpcGUoIGF1dG9wcmVmaXhlciggY29uZmlnLkJST1dTRVJTX0xJU1QgKSApXG5cdFx0LnBpcGUoIGxpbmVlYygpICkgLy8gQ29uc2lzdGVudCBMaW5lIEVuZGluZ3MgZm9yIG5vbiBVTklYIHN5c3RlbXMuXG5cdFx0LnBpcGUoIHJlbmFtZSgge1xuXHRcdFx0c3VmZml4OiAnLXJ0bCdcblx0XHR9ICkgKSAvLyBBcHBlbmQgXCItcnRsXCIgdG8gdGhlIGZpbGVuYW1lLlxuXHRcdC5waXBlKCBydGxjc3MoKSApIC8vIENvbnZlcnQgdG8gUlRMLlxuXHRcdC5waXBlKCBzb3VyY2VtYXBzLndyaXRlKCAnLi8nICkgKSAvLyBPdXRwdXQgc291cmNlbWFwIGZvciBzdHlsZS1ydGwuY3NzLlxuXHRcdC5waXBlKCBndWxwLmRlc3QoIGNvbmZpZy5zdHlsZURlc3RpbmF0aW9uICkgKVxuXHRcdC5waXBlKCBmaWx0ZXIoICcqKi8qLmNzcycgKSApIC8vIEZpbHRlcmluZyBzdHJlYW0gdG8gb25seSBjc3MgZmlsZXMuXG5cdFx0LnBpcGUoIGJyb3dzZXJTeW5jLnN0cmVhbSgpICkgLy8gUmVsb2FkcyBzdHlsZS5jc3Mgb3Igc3R5bGUtcnRsLmNzcywgaWYgdGhhdCBpcyBlbnF1ZXVlZC5cblx0XHQucGlwZSggbW1xKCB7XG5cdFx0XHRsb2c6IHRydWVcblx0XHR9ICkgKSAvLyBNZXJnZSBNZWRpYSBRdWVyaWVzIG9ubHkgZm9yIC5taW4uY3NzIHZlcnNpb24uXG5cdFx0LnBpcGUoIHJlbmFtZSgge1xuXHRcdFx0c3VmZml4OiAnLm1pbidcblx0XHR9ICkgKVxuXHRcdC5waXBlKCBtaW5pZnljc3MoIHtcblx0XHRcdG1heExpbmVMZW46IDEwXG5cdFx0fSApIClcblx0XHQucGlwZSggbGluZWVjKCkgKSAvLyBDb25zaXN0ZW50IExpbmUgRW5kaW5ncyBmb3Igbm9uIFVOSVggc3lzdGVtcy5cblx0XHQucGlwZSggZ3VscC5kZXN0KCBjb25maWcuc3R5bGVEZXN0aW5hdGlvbiApIClcblx0XHQucGlwZSggZmlsdGVyKCAnKiovKi5jc3MnICkgKSAvLyBGaWx0ZXJpbmcgc3RyZWFtIHRvIG9ubHkgY3NzIGZpbGVzLlxuXHRcdC5waXBlKCBicm93c2VyU3luYy5zdHJlYW0oKSApIC8vIFJlbG9hZHMgc3R5bGUuY3NzIG9yIHN0eWxlLXJ0bC5jc3MsIGlmIHRoYXQgaXMgZW5xdWV1ZWQuXG5cdFx0LnBpcGUoIG5vdGlmeSgge1xuXHRcdFx0bWVzc2FnZTogJ1xcblxcbuKchSAgPT09PiBTVFlMRVMgUlRMIOKAlCBjb21wbGV0ZWQhXFxuJyxcblx0XHRcdG9uTGFzdDogdHJ1ZVxuXHRcdH0gKSApO1xufSApO1xuXG4vKipcbiAqIFRhc2s6IGB2ZW5kb3JzSlNgLlxuICpcbiAqIENvbmNhdGVuYXRlIGFuZCB1Z2xpZnkgdmVuZG9yIEpTIHNjcmlwdHMuXG4gKlxuICogVGhpcyB0YXNrIGRvZXMgdGhlIGZvbGxvd2luZzpcbiAqICAgICAxLiBHZXRzIHRoZSBzb3VyY2UgZm9sZGVyIGZvciBKUyB2ZW5kb3IgZmlsZXNcbiAqICAgICAyLiBDb25jYXRlbmF0ZXMgYWxsIHRoZSBmaWxlcyBhbmQgZ2VuZXJhdGVzIHZlbmRvcnMuanNcbiAqICAgICAzLiBSZW5hbWVzIHRoZSBKUyBmaWxlIHdpdGggc3VmZml4IC5taW4uanNcbiAqICAgICA0LiBVZ2xpZmVzL01pbmlmaWVzIHRoZSBKUyBmaWxlIGFuZCBnZW5lcmF0ZXMgdmVuZG9ycy5taW4uanNcbiAqL1xuZ3VscC50YXNrKCAndmVuZG9yc0pTJywgKCkgPT4ge1xuXHRyZXR1cm4gZ3VscFxuXHRcdC5zcmMoIGNvbmZpZy5qc1ZlbmRvclNSQywge1xuXHRcdFx0c2luY2U6IGd1bHAubGFzdFJ1biggJ3ZlbmRvcnNKUycgKVxuXHRcdH0gKSAvLyBPbmx5IHJ1biBvbiBjaGFuZ2VkIGZpbGVzLlxuXHRcdC5waXBlKCBwbHVtYmVyKCBlcnJvckhhbmRsZXIgKSApXG5cdFx0LnBpcGUoXG5cdFx0XHRiYWJlbCgge1xuXHRcdFx0XHRwcmVzZXRzOiBbXG5cdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0J0BiYWJlbC9wcmVzZXQtZW52JywgLy8gUHJlc2V0IHRvIGNvbXBpbGUgeW91ciBtb2Rlcm4gSlMgdG8gRVM1LlxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YXJnZXRzOiB7XG5cdFx0XHRcdFx0XHRcdFx0YnJvd3NlcnM6IGNvbmZpZy5CUk9XU0VSU19MSVNUXG5cdFx0XHRcdFx0XHRcdH0gLy8gVGFyZ2V0IGJyb3dzZXIgbGlzdCB0byBzdXBwb3J0LlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0fSApXG5cdFx0KVxuXHRcdC5waXBlKCByZW1lbWJlciggY29uZmlnLmpzVmVuZG9yU1JDICkgKSAvLyBCcmluZyBhbGwgZmlsZXMgYmFjayB0byBzdHJlYW0uXG5cdFx0LnBpcGUoIGNvbmNhdCggY29uZmlnLmpzVmVuZG9yRmlsZSArICcuanMnICkgKVxuXHRcdC5waXBlKCBsaW5lZWMoKSApIC8vIENvbnNpc3RlbnQgTGluZSBFbmRpbmdzIGZvciBub24gVU5JWCBzeXN0ZW1zLlxuXHRcdC5waXBlKCBndWxwLmRlc3QoIGNvbmZpZy5qc1ZlbmRvckRlc3RpbmF0aW9uICkgKVxuXHRcdC5waXBlKFxuXHRcdFx0cmVuYW1lKCB7XG5cdFx0XHRcdGJhc2VuYW1lOiBjb25maWcuanNWZW5kb3JGaWxlLFxuXHRcdFx0XHRzdWZmaXg6ICcubWluJ1xuXHRcdFx0fSApXG5cdFx0KVxuXHRcdC5waXBlKCB1Z2xpZnkoKSApXG5cdFx0LnBpcGUoIGxpbmVlYygpICkgLy8gQ29uc2lzdGVudCBMaW5lIEVuZGluZ3MgZm9yIG5vbiBVTklYIHN5c3RlbXMuXG5cdFx0LnBpcGUoIGd1bHAuZGVzdCggY29uZmlnLmpzVmVuZG9yRGVzdGluYXRpb24gKSApXG5cdFx0LnBpcGUoIG5vdGlmeSgge1xuXHRcdFx0bWVzc2FnZTogJ1xcblxcbuKchSAgPT09PiBWRU5ET1IgSlMg4oCUIGNvbXBsZXRlZCFcXG4nLFxuXHRcdFx0b25MYXN0OiB0cnVlXG5cdFx0fSApICk7XG59ICk7XG5cbi8qKlxuICogVGFzazogYGN1c3RvbUpTYC5cbiAqXG4gKiBDb25jYXRlbmF0ZSBhbmQgdWdsaWZ5IGN1c3RvbSBKUyBzY3JpcHRzLlxuICpcbiAqIFRoaXMgdGFzayBkb2VzIHRoZSBmb2xsb3dpbmc6XG4gKiAgICAgMS4gR2V0cyB0aGUgc291cmNlIGZvbGRlciBmb3IgSlMgY3VzdG9tIGZpbGVzXG4gKiAgICAgMi4gQ29uY2F0ZW5hdGVzIGFsbCB0aGUgZmlsZXMgYW5kIGdlbmVyYXRlcyBjdXN0b20uanNcbiAqICAgICAzLiBSZW5hbWVzIHRoZSBKUyBmaWxlIHdpdGggc3VmZml4IC5taW4uanNcbiAqICAgICA0LiBVZ2xpZmVzL01pbmlmaWVzIHRoZSBKUyBmaWxlIGFuZCBnZW5lcmF0ZXMgY3VzdG9tLm1pbi5qc1xuICovXG5ndWxwLnRhc2soICdjdXN0b21KUycsICgpID0+IHtcblx0cmV0dXJuIGd1bHBcblx0XHQuc3JjKCBjb25maWcuanNDdXN0b21TUkMsIHtcblx0XHRcdHNpbmNlOiBndWxwLmxhc3RSdW4oICdjdXN0b21KUycgKVxuXHRcdH0gKSAvLyBPbmx5IHJ1biBvbiBjaGFuZ2VkIGZpbGVzLlxuXHRcdC5waXBlKCBwbHVtYmVyKCBlcnJvckhhbmRsZXIgKSApXG5cdFx0LnBpcGUoXG5cdFx0XHRiYWJlbCgge1xuXHRcdFx0XHRwcmVzZXRzOiBbXG5cdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0J0BiYWJlbC9wcmVzZXQtZW52JywgLy8gUHJlc2V0IHRvIGNvbXBpbGUgeW91ciBtb2Rlcm4gSlMgdG8gRVM1LlxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0YXJnZXRzOiB7XG5cdFx0XHRcdFx0XHRcdFx0YnJvd3NlcnM6IGNvbmZpZy5CUk9XU0VSU19MSVNUXG5cdFx0XHRcdFx0XHRcdH0gLy8gVGFyZ2V0IGJyb3dzZXIgbGlzdCB0byBzdXBwb3J0LlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0fSApXG5cdFx0KVxuXHRcdC5waXBlKCByZW1lbWJlciggY29uZmlnLmpzQ3VzdG9tU1JDICkgKSAvLyBCcmluZyBhbGwgZmlsZXMgYmFjayB0byBzdHJlYW0uXG5cdFx0LnBpcGUoIGNvbmNhdCggY29uZmlnLmpzQ3VzdG9tRmlsZSArICcuanMnICkgKVxuXHRcdC5waXBlKCBsaW5lZWMoKSApIC8vIENvbnNpc3RlbnQgTGluZSBFbmRpbmdzIGZvciBub24gVU5JWCBzeXN0ZW1zLlxuXHRcdC5waXBlKCBndWxwLmRlc3QoIGNvbmZpZy5qc0N1c3RvbURlc3RpbmF0aW9uICkgKVxuXHRcdC5waXBlKFxuXHRcdFx0cmVuYW1lKCB7XG5cdFx0XHRcdGJhc2VuYW1lOiBjb25maWcuanNDdXN0b21GaWxlLFxuXHRcdFx0XHRzdWZmaXg6ICcubWluJ1xuXHRcdFx0fSApXG5cdFx0KVxuXHRcdC5waXBlKCB1Z2xpZnkoKSApXG5cdFx0LnBpcGUoIGxpbmVlYygpICkgLy8gQ29uc2lzdGVudCBMaW5lIEVuZGluZ3MgZm9yIG5vbiBVTklYIHN5c3RlbXMuXG5cdFx0LnBpcGUoIGd1bHAuZGVzdCggY29uZmlnLmpzQ3VzdG9tRGVzdGluYXRpb24gKSApXG5cdFx0LnBpcGUoIG5vdGlmeSgge1xuXHRcdFx0bWVzc2FnZTogJ1xcblxcbuKchSAgPT09PiBDVVNUT00gSlMg4oCUIGNvbXBsZXRlZCFcXG4nLFxuXHRcdFx0b25MYXN0OiB0cnVlXG5cdFx0fSApICk7XG59ICk7XG5cbi8qKlxuICogVGFzazogYGltYWdlc2AuXG4gKlxuICogTWluaWZpZXMgUE5HLCBKUEVHLCBHSUYgYW5kIFNWRyBpbWFnZXMuXG4gKlxuICogVGhpcyB0YXNrIGRvZXMgdGhlIGZvbGxvd2luZzpcbiAqICAgICAxLiBHZXRzIHRoZSBzb3VyY2Ugb2YgaW1hZ2VzIHJhdyBmb2xkZXJcbiAqICAgICAyLiBNaW5pZmllcyBQTkcsIEpQRUcsIEdJRiBhbmQgU1ZHIGltYWdlc1xuICogICAgIDMuIEdlbmVyYXRlcyBhbmQgc2F2ZXMgdGhlIG9wdGltaXplZCBpbWFnZXNcbiAqXG4gKiBUaGlzIHRhc2sgd2lsbCBydW4gb25seSBvbmNlLCBpZiB5b3Ugd2FudCB0byBydW4gaXRcbiAqIGFnYWluLCBkbyBpdCB3aXRoIHRoZSBjb21tYW5kIGBndWxwIGltYWdlc2AuXG4gKnpcbiAqIFJlYWQgdGhlIGZvbGxvd2luZyB0byBjaGFuZ2UgdGhlc2Ugb3B0aW9ucy5cbiAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ3VscC1pbWFnZW1pblxuICovXG5ndWxwLnRhc2soICdpbWFnZXMnLCAoKSA9PiB7XG5cdHJldHVybiBndWxwXG5cdFx0LnNyYyggY29uZmlnLmltZ1NSQyApXG5cdFx0LnBpcGUoXG5cdFx0XHRjYWNoZShcblx0XHRcdFx0aW1hZ2VtaW4oIFtcblx0XHRcdFx0XHRpbWFnZW1pbi5naWZzaWNsZSgge1xuXHRcdFx0XHRcdFx0aW50ZXJsYWNlZDogdHJ1ZVxuXHRcdFx0XHRcdH0gKSxcblx0XHRcdFx0XHRpbWFnZW1pbi5qcGVndHJhbigge1xuXHRcdFx0XHRcdFx0cHJvZ3Jlc3NpdmU6IHRydWVcblx0XHRcdFx0XHR9ICksXG5cdFx0XHRcdFx0aW1hZ2VtaW4ub3B0aXBuZygge1xuXHRcdFx0XHRcdFx0b3B0aW1pemF0aW9uTGV2ZWw6IDNcblx0XHRcdFx0XHR9ICksIC8vIDAtNyBsb3ctaGlnaC5cblx0XHRcdFx0XHRpbWFnZW1pbi5zdmdvKCB7XG5cdFx0XHRcdFx0XHRwbHVnaW5zOiBbIHtcblx0XHRcdFx0XHRcdFx0cmVtb3ZlVmlld0JveDogdHJ1ZVxuXHRcdFx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdFx0XHRjbGVhbnVwSURzOiBmYWxzZVxuXHRcdFx0XHRcdFx0fSBdXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdF0gKVxuXHRcdFx0KVxuXHRcdClcblx0XHQucGlwZSggZ3VscC5kZXN0KCBjb25maWcuaW1nRFNUICkgKVxuXHRcdC5waXBlKCBub3RpZnkoIHtcblx0XHRcdG1lc3NhZ2U6ICdcXG5cXG7inIUgID09PT4gSU1BR0VTIOKAlCBjb21wbGV0ZWQhXFxuJyxcblx0XHRcdG9uTGFzdDogdHJ1ZVxuXHRcdH0gKSApO1xufSApO1xuXG4vKipcbiAqIFRhc2s6IGBjbGVhci1pbWFnZXMtY2FjaGVgLlxuICpcbiAqIERlbGV0ZXMgdGhlIGltYWdlcyBjYWNoZS4gQnkgcnVubmluZyB0aGUgbmV4dCBcImltYWdlc1wiIHRhc2ssXG4gKiBlYWNoIGltYWdlIHdpbGwgYmUgcmVnZW5lcmF0ZWQuXG4gKi9cbmd1bHAudGFzayggJ2NsZWFyQ2FjaGUnLCBmdW5jdGlvbiAoIGRvbmUgKSB7XG5cdHJldHVybiBjYWNoZS5jbGVhckFsbCggZG9uZSApO1xufSApO1xuXG4vKipcbiAqIFdQIFBPVCBUcmFuc2xhdGlvbiBGaWxlIEdlbmVyYXRvci5cbiAqXG4gKiBUaGlzIHRhc2sgZG9lcyB0aGUgZm9sbG93aW5nOlxuICogMS4gR2V0cyB0aGUgc291cmNlIG9mIGFsbCB0aGUgUEhQIGZpbGVzXG4gKiAyLiBTb3J0IGZpbGVzIGluIHN0cmVhbSBieSBwYXRoIG9yIGFueSBjdXN0b20gc29ydCBjb21wYXJhdG9yXG4gKiAzLiBBcHBsaWVzIHdwUG90IHdpdGggdGhlIHZhcmlhYmxlIHNldCBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZVxuICogNC4gR2VuZXJhdGUgYSAucG90IGZpbGUgb2YgaTE4biB0aGF0IGNhbiBiZSB1c2VkIGZvciBsMTBuIHRvIGJ1aWxkIC5tbyBmaWxlXG4gKi9cbmd1bHAudGFzayggJ3RyYW5zbGF0ZScsICgpID0+IHtcblx0cmV0dXJuIGd1bHBcblx0XHQuc3JjKCBjb25maWcud2F0Y2hQaHAgKVxuXHRcdC5waXBlKCBzb3J0KCkgKVxuXHRcdC5waXBlKFxuXHRcdFx0d3BQb3QoIHtcblx0XHRcdFx0ZG9tYWluOiBjb25maWcudGV4dERvbWFpbixcblx0XHRcdFx0cGFja2FnZTogY29uZmlnLnBhY2thZ2VOYW1lLFxuXHRcdFx0XHRidWdSZXBvcnQ6IGNvbmZpZy5idWdSZXBvcnQsXG5cdFx0XHRcdGxhc3RUcmFuc2xhdG9yOiBjb25maWcubGFzdFRyYW5zbGF0b3IsXG5cdFx0XHRcdHRlYW06IGNvbmZpZy50ZWFtXG5cdFx0XHR9IClcblx0XHQpXG5cdFx0LnBpcGUoIGd1bHAuZGVzdCggY29uZmlnLnRyYW5zbGF0aW9uRGVzdGluYXRpb24gKyAnLycgKyBjb25maWcudHJhbnNsYXRpb25GaWxlICkgKVxuXHRcdC5waXBlKCBub3RpZnkoIHtcblx0XHRcdG1lc3NhZ2U6ICdcXG5cXG7inIUgID09PT4gVFJBTlNMQVRFIOKAlCBjb21wbGV0ZWQhXFxuJyxcblx0XHRcdG9uTGFzdDogdHJ1ZVxuXHRcdH0gKSApO1xufSApO1xuXG4vKipcbiAqIFdhdGNoIFRhc2tzLlxuICpcbiAqIFdhdGNoZXMgZm9yIGZpbGUgY2hhbmdlcyBhbmQgcnVucyBzcGVjaWZpYyB0YXNrcy5cbiAqL1xuZ3VscC50YXNrKFxuXHQnZGVmYXVsdCcsXG5cdGd1bHAucGFyYWxsZWwoICdzdHlsZXMnLCAndmVuZG9yc0pTJywgJ2N1c3RvbUpTJywgJ2ltYWdlcycsIGJyb3dzZXJzeW5jLCAoKSA9PiB7XG5cdFx0Z3VscC53YXRjaCggY29uZmlnLndhdGNoUGhwLCByZWxvYWQgKTsgLy8gUmVsb2FkIG9uIFBIUCBmaWxlIGNoYW5nZXMuXG5cdFx0Z3VscC53YXRjaCggY29uZmlnLndhdGNoU3R5bGVzLCBndWxwLnBhcmFsbGVsKCAnc3R5bGVzJyApICk7IC8vIFJlbG9hZCBvbiBTQ1NTIGZpbGUgY2hhbmdlcy5cblx0XHRndWxwLndhdGNoKCBjb25maWcud2F0Y2hKc1ZlbmRvciwgZ3VscC5zZXJpZXMoICd2ZW5kb3JzSlMnLCByZWxvYWQgKSApOyAvLyBSZWxvYWQgb24gdmVuZG9yc0pTIGZpbGUgY2hhbmdlcy5cblx0XHRndWxwLndhdGNoKCBjb25maWcud2F0Y2hKc0N1c3RvbSwgZ3VscC5zZXJpZXMoICdjdXN0b21KUycsIHJlbG9hZCApICk7IC8vIFJlbG9hZCBvbiBjdXN0b21KUyBmaWxlIGNoYW5nZXMuXG5cdFx0Z3VscC53YXRjaCggY29uZmlnLmltZ1NSQywgZ3VscC5zZXJpZXMoICdpbWFnZXMnLCByZWxvYWQgKSApOyAvLyBSZWxvYWQgb24gY3VzdG9tSlMgZmlsZSBjaGFuZ2VzLlxuXHR9IClcbik7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "config",
        "require",
        "gulp",
        "sass",
        "minifycss",
        "autoprefixer",
        "mmq",
        "rtlcss",
        "concat",
        "uglify",
        "babel",
        "imagemin",
        "rename",
        "lineec",
        "filter",
        "sourcemaps",
        "notify",
        "browserSync",
        "create",
        "wpPot",
        "sort",
        "cache",
        "remember",
        "plumber",
        "beep",
        "errorHandler",
        "r",
        "onError",
        "browsersync",
        "done",
        "init",
        "proxy",
        "projectURL",
        "open",
        "browserAutoOpen",
        "injectChanges",
        "watchEvents",
        "reload",
        "task",
        "src",
        "styleSRC",
        "allowEmpty",
        "pipe",
        "errLogToConsole",
        "outputStyle",
        "precision",
        "on",
        "logError",
        "write",
        "includeContent",
        "loadMaps",
        "BROWSERS_LIST",
        "dest",
        "styleDestination",
        "log",
        "stream",
        "suffix",
        "maxLineLen",
        "message",
        "onLast",
        "jsVendorSRC",
        "since",
        "lastRun",
        "presets",
        "targets",
        "browsers",
        "jsVendorFile",
        "jsVendorDestination",
        "basename",
        "jsCustomSRC",
        "jsCustomFile",
        "jsCustomDestination",
        "imgSRC",
        "gifsicle",
        "interlaced",
        "jpegtran",
        "progressive",
        "optipng",
        "optimizationLevel",
        "svgo",
        "plugins",
        "removeViewBox",
        "cleanupIDs",
        "imgDST",
        "clearAll",
        "watchPhp",
        "domain",
        "textDomain",
        "package",
        "packageName",
        "bugReport",
        "lastTranslator",
        "team",
        "translationDestination",
        "translationFile",
        "parallel",
        "watch",
        "watchStyles",
        "watchJsVendor",
        "series",
        "watchJsCustom"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
      "sourcesContent": [
        "/**\n * Gulpfile.\n *\n * Gulp with WordPress.\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies Vendor and Custom JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n * @tutorial https://github.com/ahmadawais/WPGulp\n * @author Ahmad Awais <https://twitter.com/MrAhmadAwais/>\n */\n\n/**\n * Load WPGulp Configuration.\n *\n * TODO: Customize your project in the wpgulp.js file.\n */\nconst config = require( './wpgulp.config.js' );\n\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\nconst gulp = require( 'gulp' ); // Gulp of-course.\n\n// CSS related plugins.\nconst sass = require( 'gulp-sass' ); // Gulp plugin for Sass compilation.\nconst minifycss = require( 'gulp-uglifycss' ); // Minifies CSS files.\nconst autoprefixer = require( 'gulp-autoprefixer' ); // Autoprefixing magic.\nconst mmq = require( 'gulp-merge-media-queries' ); // Combine matching media queries into one.\nconst rtlcss = require( 'gulp-rtlcss' ); // Generates RTL stylesheet.\n\n// JS related plugins.\nconst concat = require( 'gulp-concat' ); // Concatenates JS files.\nconst uglify = require( 'gulp-uglify' ); // Minifies JS files.\nconst babel = require( 'gulp-babel' ); // Compiles ESNext to browser compatible JS.\n\n// Image related plugins.\nconst imagemin = require( 'gulp-imagemin' ); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n\n// Utility related plugins.\nconst rename = require( 'gulp-rename' ); // Renames files E.g. style.css -> style.min.css.\nconst lineec = require( 'gulp-line-ending-corrector' ); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\nconst filter = require( 'gulp-filter' ); // Enables you to work on a subset of the original files by filtering them using a glob.\nconst sourcemaps = require( 'gulp-sourcemaps' ); // Maps code in a compressed file (E.g. style.css) back to it’s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\nconst notify = require( 'gulp-notify' ); // Sends message notification to you.\nconst browserSync = require( 'browser-sync' ).create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\nconst wpPot = require( 'gulp-wp-pot' ); // For generating the .pot file.\nconst sort = require( 'gulp-sort' ); // Recommended to prevent unnecessary changes in pot-file.\nconst cache = require( 'gulp-cache' ); // Cache files in stream for later use.\nconst remember = require( 'gulp-remember' ); //  Adds all the files it has ever seen back into the stream.\nconst plumber = require( 'gulp-plumber' ); // Prevent pipe breaking caused by errors from gulp plugins.\nconst beep = require( 'beepbeep' );\n\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\nconst errorHandler = r => {\n\tnotify.onError( '\\n\\n❌  ===> ERROR: <%= error.message %>\\n' )( r );\n\tbeep();\n\n\t// this.emit('end');\n};\n\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\nconst browsersync = done => {\n\tbrowserSync.init( {\n\t\tproxy: config.projectURL,\n\t\topen: config.browserAutoOpen,\n\t\tinjectChanges: config.injectChanges,\n\t\twatchEvents: [ 'change', 'add', 'unlink', 'addDir', 'unlinkDir' ]\n\t} );\n\tdone();\n};\n\n// Helper function to allow browser reload with Gulp 4.\nconst reload = done => {\n\tbrowserSync.reload();\n\tdone();\n};\n\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'styles', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, {\n\t\t\tallowEmpty: true\n\t\t} )\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass( {\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t} )\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe( sourcemaps.write( {\n\t\t\tincludeContent: false\n\t\t} ) )\n\t\t.pipe( sourcemaps.init( {\n\t\t\tloadMaps: true\n\t\t} ) )\n\t\t.pipe( autoprefixer( config.BROWSERS_LIST ) )\n\t\t.pipe( sourcemaps.write( './' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( mmq( {\n\t\t\tlog: true\n\t\t} ) ) // Merge Media Queries only for .min.css version.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css if that is enqueued.\n\t\t.pipe( rename( {\n\t\t\tsuffix: '.min'\n\t\t} ) )\n\t\t.pipe( minifycss( {\n\t\t\tmaxLineLen: 10\n\t\t} ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.min.css if that is enqueued.\n\t\t.pipe( notify( {\n\t\t\tmessage: '\\n\\n✅  ===> STYLES — completed!\\n',\n\t\t\tonLast: true\n\t\t} ) );\n} );\n\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'stylesRTL', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, {\n\t\t\tallowEmpty: true\n\t\t} )\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass( {\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t} )\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe( sourcemaps.write( {\n\t\t\tincludeContent: false\n\t\t} ) )\n\t\t.pipe( sourcemaps.init( {\n\t\t\tloadMaps: true\n\t\t} ) )\n\t\t.pipe( autoprefixer( config.BROWSERS_LIST ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( rename( {\n\t\t\tsuffix: '-rtl'\n\t\t} ) ) // Append \"-rtl\" to the filename.\n\t\t.pipe( rtlcss() ) // Convert to RTL.\n\t\t.pipe( sourcemaps.write( './' ) ) // Output sourcemap for style-rtl.css.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( mmq( {\n\t\t\tlog: true\n\t\t} ) ) // Merge Media Queries only for .min.css version.\n\t\t.pipe( rename( {\n\t\t\tsuffix: '.min'\n\t\t} ) )\n\t\t.pipe( minifycss( {\n\t\t\tmaxLineLen: 10\n\t\t} ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( browserSync.stream() ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( notify( {\n\t\t\tmessage: '\\n\\n✅  ===> STYLES RTL — completed!\\n',\n\t\t\tonLast: true\n\t\t} ) );\n} );\n\n/**\n * Task: `vendorsJS`.\n *\n * Concatenate and uglify vendor JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS vendor files\n *     2. Concatenates all the files and generates vendors.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates vendors.min.js\n */\ngulp.task( 'vendorsJS', () => {\n\treturn gulp\n\t\t.src( config.jsVendorSRC, {\n\t\t\tsince: gulp.lastRun( 'vendorsJS' )\n\t\t} ) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe(\n\t\t\tbabel( {\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: {\n\t\t\t\t\t\t\t\tbrowsers: config.BROWSERS_LIST\n\t\t\t\t\t\t\t} // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t} )\n\t\t)\n\t\t.pipe( remember( config.jsVendorSRC ) ) // Bring all files back to stream.\n\t\t.pipe( concat( config.jsVendorFile + '.js' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsVendorDestination ) )\n\t\t.pipe(\n\t\t\trename( {\n\t\t\t\tbasename: config.jsVendorFile,\n\t\t\t\tsuffix: '.min'\n\t\t\t} )\n\t\t)\n\t\t.pipe( uglify() )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsVendorDestination ) )\n\t\t.pipe( notify( {\n\t\t\tmessage: '\\n\\n✅  ===> VENDOR JS — completed!\\n',\n\t\t\tonLast: true\n\t\t} ) );\n} );\n\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\ngulp.task( 'customJS', () => {\n\treturn gulp\n\t\t.src( config.jsCustomSRC, {\n\t\t\tsince: gulp.lastRun( 'customJS' )\n\t\t} ) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe(\n\t\t\tbabel( {\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: {\n\t\t\t\t\t\t\t\tbrowsers: config.BROWSERS_LIST\n\t\t\t\t\t\t\t} // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t} )\n\t\t)\n\t\t.pipe( remember( config.jsCustomSRC ) ) // Bring all files back to stream.\n\t\t.pipe( concat( config.jsCustomFile + '.js' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe(\n\t\t\trename( {\n\t\t\t\tbasename: config.jsCustomFile,\n\t\t\t\tsuffix: '.min'\n\t\t\t} )\n\t\t)\n\t\t.pipe( uglify() )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe( notify( {\n\t\t\tmessage: '\\n\\n✅  ===> CUSTOM JS — completed!\\n',\n\t\t\tonLast: true\n\t\t} ) );\n} );\n\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *z\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\ngulp.task( 'images', () => {\n\treturn gulp\n\t\t.src( config.imgSRC )\n\t\t.pipe(\n\t\t\tcache(\n\t\t\t\timagemin( [\n\t\t\t\t\timagemin.gifsicle( {\n\t\t\t\t\t\tinterlaced: true\n\t\t\t\t\t} ),\n\t\t\t\t\timagemin.jpegtran( {\n\t\t\t\t\t\tprogressive: true\n\t\t\t\t\t} ),\n\t\t\t\t\timagemin.optipng( {\n\t\t\t\t\t\toptimizationLevel: 3\n\t\t\t\t\t} ), // 0-7 low-high.\n\t\t\t\t\timagemin.svgo( {\n\t\t\t\t\t\tplugins: [ {\n\t\t\t\t\t\t\tremoveViewBox: true\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\tcleanupIDs: false\n\t\t\t\t\t\t} ]\n\t\t\t\t\t} )\n\t\t\t\t] )\n\t\t\t)\n\t\t)\n\t\t.pipe( gulp.dest( config.imgDST ) )\n\t\t.pipe( notify( {\n\t\t\tmessage: '\\n\\n✅  ===> IMAGES — completed!\\n',\n\t\t\tonLast: true\n\t\t} ) );\n} );\n\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\ngulp.task( 'clearCache', function ( done ) {\n\treturn cache.clearAll( done );\n} );\n\n/**\n * WP POT Translation File Generator.\n *\n * This task does the following:\n * 1. Gets the source of all the PHP files\n * 2. Sort files in stream by path or any custom sort comparator\n * 3. Applies wpPot with the variable set at the top of this file\n * 4. Generate a .pot file of i18n that can be used for l10n to build .mo file\n */\ngulp.task( 'translate', () => {\n\treturn gulp\n\t\t.src( config.watchPhp )\n\t\t.pipe( sort() )\n\t\t.pipe(\n\t\t\twpPot( {\n\t\t\t\tdomain: config.textDomain,\n\t\t\t\tpackage: config.packageName,\n\t\t\t\tbugReport: config.bugReport,\n\t\t\t\tlastTranslator: config.lastTranslator,\n\t\t\t\tteam: config.team\n\t\t\t} )\n\t\t)\n\t\t.pipe( gulp.dest( config.translationDestination + '/' + config.translationFile ) )\n\t\t.pipe( notify( {\n\t\t\tmessage: '\\n\\n✅  ===> TRANSLATE — completed!\\n',\n\t\t\tonLast: true\n\t\t} ) );\n} );\n\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\ngulp.task(\n\t'default',\n\tgulp.parallel( 'styles', 'vendorsJS', 'customJS', 'images', browsersync, () => {\n\t\tgulp.watch( config.watchPhp, reload ); // Reload on PHP file changes.\n\t\tgulp.watch( config.watchStyles, gulp.parallel( 'styles' ) ); // Reload on SCSS file changes.\n\t\tgulp.watch( config.watchJsVendor, gulp.series( 'vendorsJS', reload ) ); // Reload on vendorsJS file changes.\n\t\tgulp.watch( config.watchJsCustom, gulp.series( 'customJS', reload ) ); // Reload on customJS file changes.\n\t\tgulp.watch( config.imgSRC, gulp.series( 'images', reload ) ); // Reload on customJS file changes.\n\t} )\n);\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1538833733595
  },
  "{\"sourceRoot\":\"/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground\",\"filename\":\"/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground/wpgulp.config.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground\",\"plugins\":[],\"presets\":[]}:7.1.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
      "filename": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground/wpgulp.config.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground/wpgulp.config.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground/wpgulp.config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
        "sourceFileName": "wpgulp.config.js"
      }
    },
    "ast": null,
    "code": "/**\n * WPGulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n * @package WPGulp\n */\nmodule.exports = {\n  // Project options.\n  projectURL: 'http://wp-playground.local',\n  // Local project URL of your already running WordPress site. Could be something like wpgulp.local or localhost:3000 depending upon your local WordPress setup.\n  productURL: './',\n  // Theme/Plugin URL. Leave it like it is, since our gulpfile.js lives in the root folder.\n  browserAutoOpen: true,\n  injectChanges: true,\n  // Style options.\n  styleSRC: './assets/css/sass/style.scss',\n  // Path to main .scss file.\n  styleDestination: './',\n  // Path to place the compiled CSS file. Default set to root folder.\n  outputStyle: 'compact',\n  // Available options → 'compact' or 'compressed' or 'nested' or 'expanded'\n  errLogToConsole: true,\n  precision: 10,\n  // JS Vendor options.\n  jsVendorSRC: './assets/js/vendor/*.js',\n  // Path to JS vendor folder.\n  jsVendorDestination: './assets/js/',\n  // Path to place the compiled JS vendors file.\n  jsVendorFile: 'vendor',\n  // Compiled JS vendors file name. Default set to vendors i.e. vendors.js.\n  // JS Custom options.\n  jsCustomSRC: './assets/js/custom/*.js',\n  // Path to JS custom scripts folder.\n  jsCustomDestination: './assets/js/',\n  // Path to place the compiled JS custom scripts file.\n  jsCustomFile: 'custom',\n  // Compiled JS custom file name. Default set to custom i.e. custom.js.\n  // Images options.\n  imgSRC: './assets/img/raw/*',\n  // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n  imgDST: './assets/img/',\n  // Destination folder of optimized images. Must be different from the imagesSRC folder.\n  // Watch files paths.\n  watchStyles: './assets/sass/**/*.scss',\n  // Path to all *.scss files inside css folder and inside them.\n  watchJsVendor: './assets/js/vendor/*.js',\n  // Path to all vendor JS files.\n  watchJsCustom: './assets/js/custom/*.js',\n  // Path to all custom JS files.\n  watchPhp: './**/*.php',\n  // Path to all PHP files.\n  // Translation options.\n  textDomain: 'WPGULP',\n  // Your textdomain here.\n  translationFile: 'WPGULP.pot',\n  // Name of the translation file.\n  translationDestination: './languages',\n  // Where to save the translation files.\n  packageName: 'WPGULP',\n  // Package name.\n  bugReport: 'https://caseykdavis.com',\n  // Where can users report bugs.\n  lastTranslator: 'Casey K. Davis <casey@caseykdavis.com>',\n  // Last translator Email ID.\n  team: 'Casey K. Davis <casey@caseykdavis.com>',\n  // Team's Email ID.\n  // Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n  // The following list is set as per WordPress requirements. Though, Feel free to change.\n  BROWSERS_LIST: ['last 2 version', '> 1%', 'ie >= 11', 'last 1 Android versions', 'last 1 ChromeAndroid versions', 'last 2 Chrome versions', 'last 2 Firefox versions', 'last 2 Safari versions', 'last 2 iOS versions', 'last 2 Edge versions', 'last 2 Opera versions']\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndwZ3VscC5jb25maWcuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInByb2plY3RVUkwiLCJwcm9kdWN0VVJMIiwiYnJvd3NlckF1dG9PcGVuIiwiaW5qZWN0Q2hhbmdlcyIsInN0eWxlU1JDIiwic3R5bGVEZXN0aW5hdGlvbiIsIm91dHB1dFN0eWxlIiwiZXJyTG9nVG9Db25zb2xlIiwicHJlY2lzaW9uIiwianNWZW5kb3JTUkMiLCJqc1ZlbmRvckRlc3RpbmF0aW9uIiwianNWZW5kb3JGaWxlIiwianNDdXN0b21TUkMiLCJqc0N1c3RvbURlc3RpbmF0aW9uIiwianNDdXN0b21GaWxlIiwiaW1nU1JDIiwiaW1nRFNUIiwid2F0Y2hTdHlsZXMiLCJ3YXRjaEpzVmVuZG9yIiwid2F0Y2hKc0N1c3RvbSIsIndhdGNoUGhwIiwidGV4dERvbWFpbiIsInRyYW5zbGF0aW9uRmlsZSIsInRyYW5zbGF0aW9uRGVzdGluYXRpb24iLCJwYWNrYWdlTmFtZSIsImJ1Z1JlcG9ydCIsImxhc3RUcmFuc2xhdG9yIiwidGVhbSIsIkJST1dTRVJTX0xJU1QiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVNBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFFaEI7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLDRCQUhJO0FBRzBCO0FBQzFDQyxFQUFBQSxVQUFVLEVBQUUsSUFKSTtBQUlFO0FBQ2xCQyxFQUFBQSxlQUFlLEVBQUUsSUFMRDtBQU1oQkMsRUFBQUEsYUFBYSxFQUFFLElBTkM7QUFRaEI7QUFDQUMsRUFBQUEsUUFBUSxFQUFFLDhCQVRNO0FBUzBCO0FBQzFDQyxFQUFBQSxnQkFBZ0IsRUFBRSxJQVZGO0FBVVE7QUFDeEJDLEVBQUFBLFdBQVcsRUFBRSxTQVhHO0FBV1E7QUFDeEJDLEVBQUFBLGVBQWUsRUFBRSxJQVpEO0FBYWhCQyxFQUFBQSxTQUFTLEVBQUUsRUFiSztBQWVoQjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUseUJBaEJHO0FBZ0J3QjtBQUN4Q0MsRUFBQUEsbUJBQW1CLEVBQUUsY0FqQkw7QUFpQnFCO0FBQ3JDQyxFQUFBQSxZQUFZLEVBQUUsUUFsQkU7QUFrQlE7QUFFeEI7QUFDQUMsRUFBQUEsV0FBVyxFQUFFLHlCQXJCRztBQXFCd0I7QUFDeENDLEVBQUFBLG1CQUFtQixFQUFFLGNBdEJMO0FBc0JxQjtBQUNyQ0MsRUFBQUEsWUFBWSxFQUFFLFFBdkJFO0FBdUJRO0FBRXhCO0FBQ0FDLEVBQUFBLE1BQU0sRUFBRSxvQkExQlE7QUEwQmM7QUFDOUJDLEVBQUFBLE1BQU0sRUFBRSxlQTNCUTtBQTJCUztBQUV6QjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUseUJBOUJHO0FBOEJ3QjtBQUN4Q0MsRUFBQUEsYUFBYSxFQUFFLHlCQS9CQztBQStCMEI7QUFDMUNDLEVBQUFBLGFBQWEsRUFBRSx5QkFoQ0M7QUFnQzBCO0FBQzFDQyxFQUFBQSxRQUFRLEVBQUUsWUFqQ007QUFpQ1E7QUFFeEI7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLFFBcENJO0FBb0NNO0FBQ3RCQyxFQUFBQSxlQUFlLEVBQUUsWUFyQ0Q7QUFxQ2U7QUFDL0JDLEVBQUFBLHNCQUFzQixFQUFFLGFBdENSO0FBc0N1QjtBQUN2Q0MsRUFBQUEsV0FBVyxFQUFFLFFBdkNHO0FBdUNPO0FBQ3ZCQyxFQUFBQSxTQUFTLEVBQUUseUJBeENLO0FBd0NzQjtBQUN0Q0MsRUFBQUEsY0FBYyxFQUFFLHdDQXpDQTtBQXlDMEM7QUFDMURDLEVBQUFBLElBQUksRUFBRSx3Q0ExQ1U7QUEwQ2dDO0FBRWhEO0FBQ0E7QUFDQUMsRUFBQUEsYUFBYSxFQUFFLENBQ2QsZ0JBRGMsRUFFZCxNQUZjLEVBR2QsVUFIYyxFQUlkLHlCQUpjLEVBS2QsK0JBTGMsRUFNZCx3QkFOYyxFQU9kLHlCQVBjLEVBUWQsd0JBUmMsRUFTZCxxQkFUYyxFQVVkLHNCQVZjLEVBV2QsdUJBWGM7QUE5Q0MsQ0FBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2Nhc2V5a2RhdmlzL2Rldi93cC1wbGF5Z3JvdW5kL3dwLWNvbnRlbnQvdGhlbWVzL3dwLXBsYXlncm91bmQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFdQR3VscCBDb25maWd1cmF0aW9uIEZpbGVcbiAqXG4gKiAxLiBFZGl0IHRoZSB2YXJpYWJsZXMgYXMgcGVyIHlvdXIgcHJvamVjdCByZXF1aXJlbWVudHMuXG4gKiAyLiBJbiBwYXRocyB5b3UgY2FuIGFkZCA8PGdsb2Igb3IgYXJyYXkgb2YgZ2xvYnM+Pi5cbiAqXG4gKiBAcGFja2FnZSBXUEd1bHBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuXHQvLyBQcm9qZWN0IG9wdGlvbnMuXG5cdHByb2plY3RVUkw6ICdodHRwOi8vd3AtcGxheWdyb3VuZC5sb2NhbCcsIC8vIExvY2FsIHByb2plY3QgVVJMIG9mIHlvdXIgYWxyZWFkeSBydW5uaW5nIFdvcmRQcmVzcyBzaXRlLiBDb3VsZCBiZSBzb21ldGhpbmcgbGlrZSB3cGd1bHAubG9jYWwgb3IgbG9jYWxob3N0OjMwMDAgZGVwZW5kaW5nIHVwb24geW91ciBsb2NhbCBXb3JkUHJlc3Mgc2V0dXAuXG5cdHByb2R1Y3RVUkw6ICcuLycsIC8vIFRoZW1lL1BsdWdpbiBVUkwuIExlYXZlIGl0IGxpa2UgaXQgaXMsIHNpbmNlIG91ciBndWxwZmlsZS5qcyBsaXZlcyBpbiB0aGUgcm9vdCBmb2xkZXIuXG5cdGJyb3dzZXJBdXRvT3BlbjogdHJ1ZSxcblx0aW5qZWN0Q2hhbmdlczogdHJ1ZSxcblxuXHQvLyBTdHlsZSBvcHRpb25zLlxuXHRzdHlsZVNSQzogJy4vYXNzZXRzL2Nzcy9zYXNzL3N0eWxlLnNjc3MnLCAvLyBQYXRoIHRvIG1haW4gLnNjc3MgZmlsZS5cblx0c3R5bGVEZXN0aW5hdGlvbjogJy4vJywgLy8gUGF0aCB0byBwbGFjZSB0aGUgY29tcGlsZWQgQ1NTIGZpbGUuIERlZmF1bHQgc2V0IHRvIHJvb3QgZm9sZGVyLlxuXHRvdXRwdXRTdHlsZTogJ2NvbXBhY3QnLCAvLyBBdmFpbGFibGUgb3B0aW9ucyDihpIgJ2NvbXBhY3QnIG9yICdjb21wcmVzc2VkJyBvciAnbmVzdGVkJyBvciAnZXhwYW5kZWQnXG5cdGVyckxvZ1RvQ29uc29sZTogdHJ1ZSxcblx0cHJlY2lzaW9uOiAxMCxcblxuXHQvLyBKUyBWZW5kb3Igb3B0aW9ucy5cblx0anNWZW5kb3JTUkM6ICcuL2Fzc2V0cy9qcy92ZW5kb3IvKi5qcycsIC8vIFBhdGggdG8gSlMgdmVuZG9yIGZvbGRlci5cblx0anNWZW5kb3JEZXN0aW5hdGlvbjogJy4vYXNzZXRzL2pzLycsIC8vIFBhdGggdG8gcGxhY2UgdGhlIGNvbXBpbGVkIEpTIHZlbmRvcnMgZmlsZS5cblx0anNWZW5kb3JGaWxlOiAndmVuZG9yJywgLy8gQ29tcGlsZWQgSlMgdmVuZG9ycyBmaWxlIG5hbWUuIERlZmF1bHQgc2V0IHRvIHZlbmRvcnMgaS5lLiB2ZW5kb3JzLmpzLlxuXG5cdC8vIEpTIEN1c3RvbSBvcHRpb25zLlxuXHRqc0N1c3RvbVNSQzogJy4vYXNzZXRzL2pzL2N1c3RvbS8qLmpzJywgLy8gUGF0aCB0byBKUyBjdXN0b20gc2NyaXB0cyBmb2xkZXIuXG5cdGpzQ3VzdG9tRGVzdGluYXRpb246ICcuL2Fzc2V0cy9qcy8nLCAvLyBQYXRoIHRvIHBsYWNlIHRoZSBjb21waWxlZCBKUyBjdXN0b20gc2NyaXB0cyBmaWxlLlxuXHRqc0N1c3RvbUZpbGU6ICdjdXN0b20nLCAvLyBDb21waWxlZCBKUyBjdXN0b20gZmlsZSBuYW1lLiBEZWZhdWx0IHNldCB0byBjdXN0b20gaS5lLiBjdXN0b20uanMuXG5cblx0Ly8gSW1hZ2VzIG9wdGlvbnMuXG5cdGltZ1NSQzogJy4vYXNzZXRzL2ltZy9yYXcvKicsIC8vIFNvdXJjZSBmb2xkZXIgb2YgaW1hZ2VzIHdoaWNoIHNob3VsZCBiZSBvcHRpbWl6ZWQgYW5kIHdhdGNoZWQuIFlvdSBjYW4gYWxzbyBzcGVjaWZ5IHR5cGVzIGUuZy4gcmF3LyoqLntwbmcsanBnLGdpZn0gaW4gdGhlIGdsb2IuXG5cdGltZ0RTVDogJy4vYXNzZXRzL2ltZy8nLCAvLyBEZXN0aW5hdGlvbiBmb2xkZXIgb2Ygb3B0aW1pemVkIGltYWdlcy4gTXVzdCBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgaW1hZ2VzU1JDIGZvbGRlci5cblxuXHQvLyBXYXRjaCBmaWxlcyBwYXRocy5cblx0d2F0Y2hTdHlsZXM6ICcuL2Fzc2V0cy9zYXNzLyoqLyouc2NzcycsIC8vIFBhdGggdG8gYWxsICouc2NzcyBmaWxlcyBpbnNpZGUgY3NzIGZvbGRlciBhbmQgaW5zaWRlIHRoZW0uXG5cdHdhdGNoSnNWZW5kb3I6ICcuL2Fzc2V0cy9qcy92ZW5kb3IvKi5qcycsIC8vIFBhdGggdG8gYWxsIHZlbmRvciBKUyBmaWxlcy5cblx0d2F0Y2hKc0N1c3RvbTogJy4vYXNzZXRzL2pzL2N1c3RvbS8qLmpzJywgLy8gUGF0aCB0byBhbGwgY3VzdG9tIEpTIGZpbGVzLlxuXHR3YXRjaFBocDogJy4vKiovKi5waHAnLCAvLyBQYXRoIHRvIGFsbCBQSFAgZmlsZXMuXG5cblx0Ly8gVHJhbnNsYXRpb24gb3B0aW9ucy5cblx0dGV4dERvbWFpbjogJ1dQR1VMUCcsIC8vIFlvdXIgdGV4dGRvbWFpbiBoZXJlLlxuXHR0cmFuc2xhdGlvbkZpbGU6ICdXUEdVTFAucG90JywgLy8gTmFtZSBvZiB0aGUgdHJhbnNsYXRpb24gZmlsZS5cblx0dHJhbnNsYXRpb25EZXN0aW5hdGlvbjogJy4vbGFuZ3VhZ2VzJywgLy8gV2hlcmUgdG8gc2F2ZSB0aGUgdHJhbnNsYXRpb24gZmlsZXMuXG5cdHBhY2thZ2VOYW1lOiAnV1BHVUxQJywgLy8gUGFja2FnZSBuYW1lLlxuXHRidWdSZXBvcnQ6ICdodHRwczovL2Nhc2V5a2RhdmlzLmNvbScsIC8vIFdoZXJlIGNhbiB1c2VycyByZXBvcnQgYnVncy5cblx0bGFzdFRyYW5zbGF0b3I6ICdDYXNleSBLLiBEYXZpcyA8Y2FzZXlAY2FzZXlrZGF2aXMuY29tPicsIC8vIExhc3QgdHJhbnNsYXRvciBFbWFpbCBJRC5cblx0dGVhbTogJ0Nhc2V5IEsuIERhdmlzIDxjYXNleUBjYXNleWtkYXZpcy5jb20+JywgLy8gVGVhbSdzIEVtYWlsIElELlxuXG5cdC8vIEJyb3dzZXJzIHlvdSBjYXJlIGFib3V0IGZvciBhdXRvcHJlZml4aW5nLiBCcm93c2VybGlzdCBodHRwczovL2dpdGh1Yi5jb20vYWkvYnJvd3NlcnNsaXN0XG5cdC8vIFRoZSBmb2xsb3dpbmcgbGlzdCBpcyBzZXQgYXMgcGVyIFdvcmRQcmVzcyByZXF1aXJlbWVudHMuIFRob3VnaCwgRmVlbCBmcmVlIHRvIGNoYW5nZS5cblx0QlJPV1NFUlNfTElTVDogW1xuXHRcdCdsYXN0IDIgdmVyc2lvbicsXG5cdFx0Jz4gMSUnLFxuXHRcdCdpZSA+PSAxMScsXG5cdFx0J2xhc3QgMSBBbmRyb2lkIHZlcnNpb25zJyxcblx0XHQnbGFzdCAxIENocm9tZUFuZHJvaWQgdmVyc2lvbnMnLFxuXHRcdCdsYXN0IDIgQ2hyb21lIHZlcnNpb25zJyxcblx0XHQnbGFzdCAyIEZpcmVmb3ggdmVyc2lvbnMnLFxuXHRcdCdsYXN0IDIgU2FmYXJpIHZlcnNpb25zJyxcblx0XHQnbGFzdCAyIGlPUyB2ZXJzaW9ucycsXG5cdFx0J2xhc3QgMiBFZGdlIHZlcnNpb25zJyxcblx0XHQnbGFzdCAyIE9wZXJhIHZlcnNpb25zJ1xuXHRdXG59O1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "wpgulp.config.js"
      ],
      "names": [
        "module",
        "exports",
        "projectURL",
        "productURL",
        "browserAutoOpen",
        "injectChanges",
        "styleSRC",
        "styleDestination",
        "outputStyle",
        "errLogToConsole",
        "precision",
        "jsVendorSRC",
        "jsVendorDestination",
        "jsVendorFile",
        "jsCustomSRC",
        "jsCustomDestination",
        "jsCustomFile",
        "imgSRC",
        "imgDST",
        "watchStyles",
        "watchJsVendor",
        "watchJsCustom",
        "watchPhp",
        "textDomain",
        "translationFile",
        "translationDestination",
        "packageName",
        "bugReport",
        "lastTranslator",
        "team",
        "BROWSERS_LIST"
      ],
      "mappings": "AAAA;;;;;;;;AASAA,MAAM,CAACC,OAAP,GAAiB;AAEhB;AACAC,EAAAA,UAAU,EAAE,4BAHI;AAG0B;AAC1CC,EAAAA,UAAU,EAAE,IAJI;AAIE;AAClBC,EAAAA,eAAe,EAAE,IALD;AAMhBC,EAAAA,aAAa,EAAE,IANC;AAQhB;AACAC,EAAAA,QAAQ,EAAE,8BATM;AAS0B;AAC1CC,EAAAA,gBAAgB,EAAE,IAVF;AAUQ;AACxBC,EAAAA,WAAW,EAAE,SAXG;AAWQ;AACxBC,EAAAA,eAAe,EAAE,IAZD;AAahBC,EAAAA,SAAS,EAAE,EAbK;AAehB;AACAC,EAAAA,WAAW,EAAE,yBAhBG;AAgBwB;AACxCC,EAAAA,mBAAmB,EAAE,cAjBL;AAiBqB;AACrCC,EAAAA,YAAY,EAAE,QAlBE;AAkBQ;AAExB;AACAC,EAAAA,WAAW,EAAE,yBArBG;AAqBwB;AACxCC,EAAAA,mBAAmB,EAAE,cAtBL;AAsBqB;AACrCC,EAAAA,YAAY,EAAE,QAvBE;AAuBQ;AAExB;AACAC,EAAAA,MAAM,EAAE,oBA1BQ;AA0Bc;AAC9BC,EAAAA,MAAM,EAAE,eA3BQ;AA2BS;AAEzB;AACAC,EAAAA,WAAW,EAAE,yBA9BG;AA8BwB;AACxCC,EAAAA,aAAa,EAAE,yBA/BC;AA+B0B;AAC1CC,EAAAA,aAAa,EAAE,yBAhCC;AAgC0B;AAC1CC,EAAAA,QAAQ,EAAE,YAjCM;AAiCQ;AAExB;AACAC,EAAAA,UAAU,EAAE,QApCI;AAoCM;AACtBC,EAAAA,eAAe,EAAE,YArCD;AAqCe;AAC/BC,EAAAA,sBAAsB,EAAE,aAtCR;AAsCuB;AACvCC,EAAAA,WAAW,EAAE,QAvCG;AAuCO;AACvBC,EAAAA,SAAS,EAAE,yBAxCK;AAwCsB;AACtCC,EAAAA,cAAc,EAAE,wCAzCA;AAyC0C;AAC1DC,EAAAA,IAAI,EAAE,wCA1CU;AA0CgC;AAEhD;AACA;AACAC,EAAAA,aAAa,EAAE,CACd,gBADc,EAEd,MAFc,EAGd,UAHc,EAId,yBAJc,EAKd,+BALc,EAMd,wBANc,EAOd,yBAPc,EAQd,wBARc,EASd,qBATc,EAUd,sBAVc,EAWd,uBAXc;AA9CC,CAAjB",
      "sourceRoot": "/Users/caseykdavis/dev/wp-playground/wp-content/themes/wp-playground",
      "sourcesContent": [
        "/**\n * WPGulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n * @package WPGulp\n */\n\nmodule.exports = {\n\n\t// Project options.\n\tprojectURL: 'http://wp-playground.local', // Local project URL of your already running WordPress site. Could be something like wpgulp.local or localhost:3000 depending upon your local WordPress setup.\n\tproductURL: './', // Theme/Plugin URL. Leave it like it is, since our gulpfile.js lives in the root folder.\n\tbrowserAutoOpen: true,\n\tinjectChanges: true,\n\n\t// Style options.\n\tstyleSRC: './assets/css/sass/style.scss', // Path to main .scss file.\n\tstyleDestination: './', // Path to place the compiled CSS file. Default set to root folder.\n\toutputStyle: 'compact', // Available options → 'compact' or 'compressed' or 'nested' or 'expanded'\n\terrLogToConsole: true,\n\tprecision: 10,\n\n\t// JS Vendor options.\n\tjsVendorSRC: './assets/js/vendor/*.js', // Path to JS vendor folder.\n\tjsVendorDestination: './assets/js/', // Path to place the compiled JS vendors file.\n\tjsVendorFile: 'vendor', // Compiled JS vendors file name. Default set to vendors i.e. vendors.js.\n\n\t// JS Custom options.\n\tjsCustomSRC: './assets/js/custom/*.js', // Path to JS custom scripts folder.\n\tjsCustomDestination: './assets/js/', // Path to place the compiled JS custom scripts file.\n\tjsCustomFile: 'custom', // Compiled JS custom file name. Default set to custom i.e. custom.js.\n\n\t// Images options.\n\timgSRC: './assets/img/raw/*', // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n\timgDST: './assets/img/', // Destination folder of optimized images. Must be different from the imagesSRC folder.\n\n\t// Watch files paths.\n\twatchStyles: './assets/sass/**/*.scss', // Path to all *.scss files inside css folder and inside them.\n\twatchJsVendor: './assets/js/vendor/*.js', // Path to all vendor JS files.\n\twatchJsCustom: './assets/js/custom/*.js', // Path to all custom JS files.\n\twatchPhp: './**/*.php', // Path to all PHP files.\n\n\t// Translation options.\n\ttextDomain: 'WPGULP', // Your textdomain here.\n\ttranslationFile: 'WPGULP.pot', // Name of the translation file.\n\ttranslationDestination: './languages', // Where to save the translation files.\n\tpackageName: 'WPGULP', // Package name.\n\tbugReport: 'https://caseykdavis.com', // Where can users report bugs.\n\tlastTranslator: 'Casey K. Davis <casey@caseykdavis.com>', // Last translator Email ID.\n\tteam: 'Casey K. Davis <casey@caseykdavis.com>', // Team's Email ID.\n\n\t// Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n\t// The following list is set as per WordPress requirements. Though, Feel free to change.\n\tBROWSERS_LIST: [\n\t\t'last 2 version',\n\t\t'> 1%',\n\t\t'ie >= 11',\n\t\t'last 1 Android versions',\n\t\t'last 1 ChromeAndroid versions',\n\t\t'last 2 Chrome versions',\n\t\t'last 2 Firefox versions',\n\t\t'last 2 Safari versions',\n\t\t'last 2 iOS versions',\n\t\t'last 2 Edge versions',\n\t\t'last 2 Opera versions'\n\t]\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1538847924287
  }
}